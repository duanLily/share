@charset "UTF-8";
/* scss注释
   多行注释  编译后会输出到css里面(compressed情况下会省略) */
/*!强制输出的注释内容 编译后会输出到css里面*/
/* 变量 */
@import url("http://fonts.googleapis.com/css?family=#{$family}");
div.box {
  background-color: #1269b5; }

body {
  font: 100% Helvetica, sans-serif;
  color: #1269b5; }

/* 嵌套规则
  将一套 CSS 样式嵌套进另一套样式中 */
.nav {
  height: 100px; }
  .nav ul {
    margin: 0; }
    .nav ul li {
      float: left;
      list-style: none;
      padding: 5px; }
    .nav ul a {
      display: block;
      color: #fff;
      padding: 5px;
      /* & 嵌套时调用父选择器 */ }
      .nav ul a:hover {
        background-color: #c6fff5;
        color: #ffffff; }
  .nav .nav-text {
    font-size: 15px; }

/*嵌套属性  重复内容抽出来*/
body {
  font-family: Helvetica, Arial, sans-serif;
  font-size: 17px;
  font-weight: normal; }

.navigate {
  border: 1px solid #c6fff5;
    border-left: 0;
    border-right: 0; }

/* 数字运算 */
p {
  width: 1.1111111111in; }

/* 除法运算 /被视为除号的三种情况
如果值，或值的一部分，是变量或者函数的返回值
如果值被圆括号包裹
如果值是算数表达式的一部分 */
p {
  width: 500px;
  font: 10px/8px;
  /* 使用变量，又要确保 / 不做除法运算而是完整地编译到 CSS 文件中，只需要用插值语句将变量包裹 */
  font: 12px/30px;
  padding: 1px;
  height: 250px;
  margin-left: 9px; }

/* 字符串运算 */
p:before {
  content: "Foo Bar";
  font-family: sans-serif;
  /* 在有引号的文本字符串中使用插值语句可以添加动态的值 */
  contents: "I ate 15 pies!";
  /* 空的值被视作插入了空字符串 */
  contentss: "I ate  pies!"; }

/* @import 引入Partials   Partials使css模块化，更有条理性 */
/* 文件名前加_，编译后文件就不会输出css
如果需要导入 SCSS 或者 Sass 文件，但又不希望将其编译为 CSS，
只需要在文件名前添加下划线，这样会告诉 Sass 不要编译这些文件，
但导入语句中却不需要添加下划线 */
/*文件名前加_，编译后文件就不会输出css*/
body {
  font: 100% Helvetica, sans-serif;
  color: #444; }

.use-import {
  background-color: #444;
  color: #ffc800; }

/* 使用插值语句导入文件 */
/* @media
允许其在 CSS 规则中嵌套。如果 @media 嵌套在 CSS 规则内，编译时，
@media 将被编译到文件的最外层，包含嵌套的父选择器。
可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值 */
.sidebar {
  width: 300px; }
  @media screen and (orientation: landscape) {
    .sidebar {
      width: 500px; } }

/* @media 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 and */
@media screen and (orientation: landscape) {
  .sidebar {
    width: 500px; } }

/* @extend 继承 */
/* %message-shared 被继承了，会输出到css
占位符选择器本身不会被编译 */
.message {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333; }

.message {
  color: pink; }

.father-div, .child-div {
  padding: 2px; }

.child-div {
  background-color: lightblue; }

/* @at-root
直接移除了父选择，编译出来的CSS无任何嵌套，让代码更加的简单 */
.bar {
  color: gray; }
  button {
    color: red; }
    span {
      color: orange; }

/* 只会跳出选择器嵌套，而不能跳出 @media 或 @support，
如果要跳出这两种，则需使用 @at-root(without: media)，
@at-root(without: support)
这个语法的关键词有四个：rule（表示常规）,
all（表示所有）,  media（表示 media），
 support（表示 support ）。
 我们默认@at-root( without: rule )
 rule ：只能跳出选择器嵌套，不能跳出 @media 和 @support
 media ：可以跳出 @media ，但是没有跳出父级选择器
 support ：和 @at-root(without: media) 相似，只是跳出的是 @support
 all ：是跳出所的指令和规则 */
@media print {
  .page {
    width: 800px; }
    .page a {
      color: red; } }
    .page a span {
      color: #00ffff; }

/* 跳出 @media 和 父级嵌套，可以一次添加两个指令，两个指令用空格分隔 */
@media print {
  .page {
    width: 800px; }
    .page a {
      color: red; } }
    span {
      color: #00ffff; }

/* @debug 在控制台打印表达式的值 */
/* @warn 提示信息会输出在命令行 */
/* @error 报错会直接影响css输出 */
/*颜色表示方式:
RGB:红(0-255) 绿(0-255) 蓝(0-255)
RGBA:红(0-255) 绿(0-255) 蓝(0-255) 透明度透明度(0-1)
HSL:色相(0-360) 饱和度(0-100) 明度(0-100)
HSLA:色相(0-360) 饱和度(0-100) 明度(0-100) 透明度(0-1)
adjust-hue:调整颜色的色相值
lighten:调整颜色的亮度
darken:调整颜色的暗度
saturate:增加颜色的纯度
desaturate:减少颜色的纯度
opacify:减少透明度
transparentize:增加透明度
*/
.adjust-color-div {
  background-color: #00ff48; }

.ld-color-div {
  border: 1px solid #004dff;
  background-color: #99b8ff;
  color: #002e99; }

.saturate-div {
  background-color: #004dff; }

.desaturate-div {
  background-color: #4066bf; }

.opacify-color {
  background-color: #004dff;
  border: 1px solid rgba(0, 77, 255, 0.8); }

/*Interpolation 插值语句可以在选择器或属性名中使用变量 */
/*当前版本号0.0.1*/
.div-info {
  border-color: pink; }

/*控制指令*/
/* @if */
.if-div {
  background-color: black; }

/* @for */
/* @for $var from <开始值> through <结束值>{...} */
.col-1 {
  width: 25%; }

.col-2 {
  width: 50%; }

.col-3 {
  width: 75%; }

.col-4 {
  width: 100%; }

/* @for $var from <开始值> to <结束值>{...} */
.col-1 {
  width: 25%; }

.col-2 {
  width: 50%; }

.col-3 {
  width: 75%; }

/* @each */
/* @each $var in $list {...} */
.icon-success {
  background-image: url("../images/icons/success.png"); }

.icon-error {
  background-image: url("../images/icons/error.png"); }

.icon-warning {
  background-image: url("../images/icons/warning.png"); }

/* @while */
/* @while 条件 {...} */
.item-6 {
  width: 30px; }

.item-4 {
  width: 20px; }

.item-2 {
  width: 10px; }

/* @mixin定义
@include使用 */
.alert-warning {
  color: antiquewhite;
  background-color: #fff; }
  .alert-warning a {
    color: pink; }

/* 带参数的mixin  参数定义顺序和使用顺序一致,或者直接传键值对 */
.use-div {
  color: blue;
  background-color: pink; }
  .use-div a {
    color: #0000cc; }

.use-info {
  color: pink;
  background-color: blue; }
  .use-info a {
    color: #ff8da1; }

/* 用户自定义函数 */
/* @function 名称 (参数1，参数2){...} */
/* @warn 提示信息会输出在命令行 */
/* @error 报错会直接影响css输出 */
.color-div {
  background-color: black; }

#sidebar {
  width: 240px; }

#sidebar1 {
  width: 240px; }

/*# sourceMappingURL=style.css.map */
